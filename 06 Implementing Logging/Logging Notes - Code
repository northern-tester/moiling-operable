









# Logging Code Notes

## Simple Logging

Run the app...

First add, basic logging to the web app:

File: src/services/express/index.js

app.use(morgan('tiny'))

Second, lets turn on database logging:

File: src/config.js

debug: true

Rerun the app

Make some requests via the Postman Collection


## Adding Events

File: src/app.js

### Mongo connection

mongoose.connect(mongo.uri, {useNewUrlParser: true}, function () {
  console.info(`MongoDBConnectionSuccess: connected to ${mongo.uri}`)
});

### Application start up

setImmediate(() => {
  server.listen(port, ip, () => {
    console.log('ExpressApplicationStartedSucccess: Express server listening on http://%s:%d, in %s mode', ip, port, env)
  })
})

### Mongo Error








## Advanced Logging

File: src/services/express/index.js

Add to the logger function

app.use(morgan('[:date[clf]] :status :method :url :response-time ":user-agent"'));

Add a unique id within the logs for each request in express

## Adding Id's to Logs 

var sessionId = generateSafeId();

morgan.token('id', function getId(){
return sessionId
});

## Adding Structure to Logs

Lets start with mongo, gets a bit more complex now.

File: src/services/mongoose/index.js

mongoose.set('debug', function (coll, method, query, doc, options) {
let set = {
	coll: coll,
	method: method,
	query: query,
	doc: doc,
	options: options
}

console.info({
	dbQuery: set
	})
})

Then lets amend the express bit too

File: src/services/express/index.js

app.use(morgan, function ([:date[clf]], :id, :status, :method, :url, :response-time, ":user-agent"') {
let set = {
	date: date,
	id: id,
	status: status,
	method: method,
	url: url,
	responseTime: responseTime,
	userAgent: userAgent
}

console.info({
	webRequest: set
	})
})

## Write to file on both, while maintaining std out

File: src/services/express/index.js

var rfs = require('rotating-file-stream');

//Get the log directory
var logDirectory = path.join(__dirname, 'logs');

//Create a rotating write stream
var accessLogStream = rfs('access.log', {
interval: '1d',
path: logDirectory
});

app.use(logger('[:date[clf]] :id :status :method :url :response-time ":user-agent"', {stream:accessLogStream}));

And now the mongo logs:

File: src/services/mongoose/index.js

## What we want to end up with

Structured logs for mongo

Structured logs for each endpoint with a decent name

Writing to file

Rotating daily