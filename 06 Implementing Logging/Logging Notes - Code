# Logging Code Notes

## Simple Logging

Run the app...

First add, basic logging to the web app:

File: src/services/express/index.js

app.use(morgan('tiny'))

Second, lets turn on database logging:

File: src/config.js

debug: true

Rerun the app

Make some requests via the Postman Collection

---------------------------------------------------------------------------------------------------------------------------------------------------------

## Advanced Logging

File: src/services/express/index.js

Add to the morgan function

app.use(morgan('[:date[clf]] :status :method :url :response-time ":user-agent"'));

---------------------------------------------------------------------------------------------------------------------------------------------------------

## Adding Id's to Logs 

File: src/services/express/index.js

morgan.token('id', function getId(){
return generateSafeId();
});

app.use(morgan('[:date[clf]] :id :status :method :url :response-time ":user-agent"'));

---------------------------------------------------------------------------------------------------------------------------------------------------------

## Adding Structure to Logs

### Lets start with mongo, gets a bit more complex now.

File: src/services/mongoose/index.js

import generateSafeId from 'generate-safe-id';

mongoose.set('debug', function (coll, method, query, doc) {
let set = {
	id: generateSafeId(),
	coll: coll,
	method: method,
	query: query,
	doc: doc,
}

console.info({
	dbQuery: set
	})
})

### Lets move on to our web requests

File: src/services/express/index.js

  const json = require('morgan-json');

  const format = json({
    short: ':id :method :originalUrl :status',
    length: ':res[content-length]',
    'response-time': ':response-time ms'
  });

  app.use(morgan(format));

---------------------------------------------------------------------------------------------------------------------------------------------------------

## Adding Diagnostic Events

File: src/app.js

### Mongo connection

mongoose.connect(mongo.uri, {useNewUrlParser: true}, function () {
  console.info(`MongoDBConnectionSuccess: connected to ${mongo.uri}`)
});

### Application start up

setImmediate(() => {
  server.listen(port, ip, () => {
    console.log('ExpressApplicationStartedSucccess: Express server listening on http://%s:%d, in %s mode', ip, port, env)
  })
})

### Mongo Error

File: src/services/mongoose/index.js

mongoose.connection.on('error', (err) => {
  console.error('MongoDBConnectionError: ' + err);
  process.exit(-1)
});

---------------------------------------------------------------------------------------------------------------------------------------------------------

## Adding Business Events

Add a file called eventLookup.js containing:

export function setEventName(originalUrl, method, statusCode) {
  let eventName;
  switch (originalUrl) {
    case "/users":
      if (method === "POST" && statusCode === 201) {
        eventName = "CreateUserSuccess"
      } else if (method === "POST" && statusCode > 400) {
        eventName = "CreateUserFailure"
      }
      break;
    default:
      eventName = "WebRequestEvent";
      break;
  }
  return eventName
}

Then lets amend the express bit too

File: src/services/express/index.js

  morgan.token('eventName', function getEventName(req, res) {
    return eventLookup.setEventName(req.originalUrl, req.method, res.statusCode);
  });

  const format = json({
    short: '[:date[clf]] :id :eventName :method :url :status',
    length: ':res[content-length]',
    'response-time': ':response-time ms'
  });

  app.use(morgan(format));


---------------------------------------------------------------------------------------------------------------------------------------------------------

For later

## Write to file on both, while maintaining std out

File: src/services/express/index.js

var rfs = require('rotating-file-stream');

//Get the log directory
var logDirectory = path.join(__dirname, 'logs');

//Create a rotating write stream
var accessLogStream = rfs('access.log', {
interval: '1d',
path: logDirectory
});

app.use(logger('[:date[clf]] :id :status :method :url :response-time ":user-agent"', {stream:accessLogStream}));

And now the mongo logs:

File: src/services/mongoose/index.js

## What we want to end up with

Structured logs for mongo

Structured logs for each endpoint with a decent name

Writing to file

Rotating daily